<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>热门100题（题目均来自LeetCode，仅供学习使用）</title>
      <link href="/2023/02/11/%E7%83%AD%E9%97%A8100%E9%A2%98/"/>
      <url>/2023/02/11/%E7%83%AD%E9%97%A8100%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="2023-x2F-02-x2F-11"><a href="#2023-x2F-02-x2F-11" class="headerlink" title="2023&#x2F;02&#x2F;11"></a>2023&#x2F;02&#x2F;11</h3><ol><li><a href="https://leetcode.cn/problems/two-sum/?favorite=2cktkvj">两数之和</a><blockquote><p>​给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。(题目leetCode)</p></blockquote></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    *returnSize=<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span>* <span class="built_in">array</span>=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j]==target)</span><br><span class="line">                  k=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">0</span>]=i;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">1</span>]=j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：本题采用暴力求解，可采用hash算法快速找到目标位置达到优化，更优解可看参考答案。</p><hr><ol start="2"><li><a href="https://leetcode.cn/problems/add-two-numbers/?favorite=2cktkvj">两数相加</a><blockquote><p>​给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></blockquote></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>,is=<span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p1</span>=</span>l1;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p2</span>=</span>l2;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">end</span>,*<span class="title">node</span>,*<span class="title">sum</span>;</span></span><br><span class="line">    sum=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    end=sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>&amp;&amp;p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)</span><br><span class="line">     s=is;</span><br><span class="line">    s=s+p1-&gt;val+p2-&gt;val;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    p1=p1-&gt;next;</span><br><span class="line">    p2=p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">   node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)</span><br><span class="line">     s=is;</span><br><span class="line">    s=s+p1-&gt;val+<span class="number">0</span>;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    p1=p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">while</span>(p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)</span><br><span class="line">     s=is;</span><br><span class="line">    s=s+<span class="number">0</span>+p2-&gt;val;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    p2=p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">      node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    s=is;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    end-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> sum-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：整体就是使用链表进行大数加法，如果直接使用整型进行加法会出现超出范围的情况，更优解可看参考答案。</p><h3 id="2023-x2F-02-x2F-12"><a href="#2023-x2F-02-x2F-12" class="headerlink" title="2023&#x2F;02&#x2F;12"></a>2023&#x2F;02&#x2F;12</h3><ol start="3"><li><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/?favorite=2cktkvj">无重复字符的最长子串</a></p><blockquote><p>​给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>(), max = <span class="number">0</span>;</span><br><span class="line">    string p = s;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isReat</span>(s))</span><br><span class="line">        max = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//长度为i的字符串，英文字母、数字、符号和空格总数不超过128个</span></span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">128</span>)</span><br><span class="line">            n=<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j + i &lt;=n; j++) &#123;</span><br><span class="line">                p = s.<span class="built_in">substr</span>(j, i);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">isReat</span>(p)) &#123;</span><br><span class="line">                    max = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断子串是否重复</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isReat</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> array[<span class="number">128</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, n = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        array[(<span class="type">int</span>)s[i]]++;</span><br><span class="line">        <span class="keyword">if</span>(array[(<span class="type">int</span>)s[i]]&gt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：由于C语言没有字符串裁取函数，较为麻烦，所以采用C++，思路是将字符串从大到小裁取，再判断子字符串是否重复，更优解可看参考答案。</p></li><li><p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/?favorite=2cktkvj">寻找两个正序数组的中位数</a></p><blockquote><p>​给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。算法的时间复杂度应该为 O(log (m+n)) 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> mid=<span class="number">0.0</span>;</span><br><span class="line">       nums1.<span class="built_in">insert</span>(nums1.<span class="built_in">end</span>(),nums2.<span class="built_in">begin</span>(),nums2.<span class="built_in">end</span>());</span><br><span class="line">       <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(),nums1.<span class="built_in">end</span>());</span><br><span class="line">       <span class="type">int</span> n=nums1.<span class="built_in">size</span>();</span><br><span class="line">       <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">         mid= (nums1[n/<span class="number">2</span>]+nums1[n/<span class="number">2</span><span class="number">-1</span>]);</span><br><span class="line">         mid/=<span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         mid=nums1[n/<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：将数组合并后利用快排排序，再找出中位数即可，更优解可看参考答案。</p></li></ol><h3 id="2023-x2F-02-x2F-13"><a href="#2023-x2F-02-x2F-13" class="headerlink" title="2023&#x2F;02&#x2F;13"></a>2023&#x2F;02&#x2F;13</h3><ol start="5"><li><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/">最长回文子串</a></p><blockquote><p>​给你一个字符串 s，找到 s 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> max = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//dp数组表示s[i]到s[j]的子串</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n));</span><br><span class="line"><span class="comment">//长度为一的字串默认是回文子串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//reLength代表回文子串的长度。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> reLength = <span class="number">2</span>; reLength &lt;= n; reLength++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j = reLength + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//如果两端不相等则不是</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] != s[j])</span><br><span class="line">                dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果长度小于3则为回文子串</span></span><br><span class="line">                <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>)</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//状态转移</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新最大子串</span></span><br><span class="line">            <span class="keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="number">1</span> &gt; max) &#123;</span><br><span class="line">                max = j - i + <span class="number">1</span>;</span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：本题采用动态规划dp数组表示字符串s[i]到s[j]，当规模为n-1为回文子串，如果子串的两端相同，则规模为n是否回文与规模为n-1的子串状态相同，不同则不为回文子串。</p></li><li><p><a href="https://leetcode.cn/problems/zigzag-conversion/">N字变形</a></p><blockquote><p>​将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 N 字形排列。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || numRows &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (numRows == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">str</span><span class="params">(numRows, <span class="string">&quot;&quot;</span>)</span></span>;</span><br><span class="line">    string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>(), j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        j = i % (<span class="number">2</span> * numRows - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= numRows - <span class="number">1</span>)</span><br><span class="line">            str[j] += s[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            str[<span class="number">2</span> * numRows - <span class="number">2</span> - j] += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)</span><br><span class="line">        ans += str[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注：规律—i%(2<em>numRows-2)的结果为j，0是第0行，1和2</em>numRows-2-1属于第1行，同理k和2*numRows-2-k属于第k行，最后再将所有拼起来即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode热题100 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言复习总结</title>
      <link href="/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础零散的知识点"><a href="#一、基础零散的知识点" class="headerlink" title="一、基础零散的知识点"></a>一、基础零散的知识点</h2><ol><li>%11.9f  —  表示共11位，小数点后9位。</li><li>#define  标识符  常量 —宏定义</li><li>\0 代表字符串结束</li><li>数据类型 <ul><li>基本类型<ul><li>整数类型</li><li>浮点类型</li><li>字符类型</li><li>枚举类型</li></ul></li><li>指针类型</li><li>构造类型<ul><li>数组类型</li><li>结构类型</li><li>联合类型</li></ul></li><li>空类型</li></ul></li><li>sizeof(对象 or 类型)sizeof 变量</li><li>signed（带符号）unsigned（不带符号）—0正1负，int默认带符号型</li><li>补码<ul><li>正数：与原码相同</li><li>负数：符号不变，其余位取反后再+1</li></ul></li><li>强制类型转换 — eg: (int)2.0</li><li>条件运算符（三目）：exp1 ? exp2 : exp3; eg: a&gt;b ? a : b</li><li>字符处理函数：<ul><li>strlen() — 获取长度（不包含\0，sizeof包含，如字符串abc，strlen长度为3，sizeof为4。）</li><li>strcpy()和strncpy() — 拷贝（拷贝后需手动追加\0。）</li><li>strcat()和strncat() — 连接（连接后自动追加\0。）</li><li>strcmp()和strncmp() — 比较（若str1&#x3D;str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数。）</li></ul></li><li>二维数组  int array  [ ]  [4]  ,后面的4必须确定。</li></ol><h2 id="二、指针部分"><a href="#二、指针部分" class="headerlink" title="二、指针部分"></a>二、指针部分</h2> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="type">char</span> *pa =&amp;a;  其中&amp;为取地址运算符，打印时%p为地址类型数据，还应避免访问未初始化的指针；</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="type">int</span> *p[<span class="number">5</span>] ---指针数组（指针的数组） ， <span class="type">int</span> (*p)[<span class="number">5</span>] --- 数组指针（指向数组的指针）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="literal">NULL</span>不是NUL，<span class="literal">NULL</span>代表空指针，而NUL代表<span class="string">&#x27;\0&#x27;</span>。</span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span> <span class="type">int</span> **p=<span class="built_in">array</span>；其中<span class="built_in">array</span>为二维数组，使用p+<span class="number">1</span>会出错，因为不知道数组跨度为多少与二维数组第二个[]必须道理相通。</span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span> 指向常量的指针 <span class="type">const</span> <span class="type">int</span> *p; --- 可以指向常量or变量，不可以通过指针修改指向的值。</span><br><span class="line">   常量指针 <span class="type">int</span> * <span class="type">const</span> p=&amp;num; --- p不可被修改，及改变p存储的地址</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> 可变参数 <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span> n,...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 指针函数 <span class="type">char</span> *<span class="title function_">getWord</span><span class="params">(<span class="type">char</span> c)</span> ---返回指针的函数<span class="comment">//不能返回局部变量的指针，返回时已经销毁</span></span><br><span class="line">   函数指针 <span class="title function_">char</span> <span class="params">(*get)</span><span class="params">(<span class="type">char</span>)</span> ---指向函数的指针<span class="comment">//get=&amp;getWor;get(&#x27;a&#x27;)或者(*get)(&#x27;a&#x27;)，后者较好，前者会误以为是函数调用。</span></span><br><span class="line">   <span class="comment">// 函数指针作为返回值 int (*select(char op))(int,int);而不是int (*fp(char op)) select(int ,int)。</span></span><br><span class="line">   </span><br><span class="line">8. <span class="title function_">extern</span><span class="params">(外部的)</span><span class="comment">//多个文件的声明的同名标识符表示同一个实体。</span></span><br><span class="line">   <span class="title function_">internal</span><span class="params">(内部的)</span><span class="comment">//单个文件声明的同名标识符表示同一个实体。</span></span><br><span class="line">   <span class="comment">//只有具备文件作用域的标识符（如函数名，全局变量）才能拥有extern或者internal的链接属性，static可将external改为internal(全局变量)。</span></span><br><span class="line">   <span class="title function_">none</span><span class="params">(无)</span><span class="comment">//声明的同名标识符被当作独立不同的实体。</span></span><br><span class="line"></span><br><span class="line">9. 存储类型分为：<span class="keyword">auto</span>（默认）,<span class="keyword">register</span><span class="comment">/*寄存器变量无法通过取址运算符获得该变量的地址*/</span>,<span class="type">static</span>,<span class="keyword">extern</span>,<span class="keyword">typedef</span>.</span><br><span class="line"></span><br><span class="line">10. 递归 --- 汉诺塔，x,y,z三根柱子，x全移动到z上可分解为，x最大的移动到z上，x剩下的移动到y上（此时的y即刚刚的x，即将y的全部移动到z上，步数是2的n次方-1）。</span><br><span class="line"></span><br><span class="line">11. 动态内存管理 </span><br><span class="line"><span class="title function_">malloc</span><span class="params">()</span><span class="comment">//int *p=(int *)malloc(sizeof(int));</span></span><br><span class="line"><span class="title function_">calloc</span><span class="params">()</span><span class="comment">//自动初始化 int *p=(int *)calloc(8,sizeof(int));</span></span><br><span class="line"><span class="title function_">realloc</span><span class="params">()</span><span class="comment">//重新分配,int *p=NULL; p=(int *)realloc(p,N*sizeof(int));</span></span><br><span class="line"><span class="built_in">free</span><span class="comment">//free(p); </span></span><br><span class="line"><span class="title function_">memset</span><span class="params">(p,<span class="number">0</span>,N*<span class="keyword">sizeof</span>(<span class="type">int</span>))</span>;<span class="comment">//置零，包含在string.h头文件中</span></span><br><span class="line"><span class="comment">//内存泄漏：（1）隐式内存泄漏（用完未及时使用free）；（2）丢失内存块地址</span></span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
