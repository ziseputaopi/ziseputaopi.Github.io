<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言练习题总结</title>
      <link href="/2023/03/23/C%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2023/03/23/C%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ol><li>在 64 位平台机器下 sizeof(string_a)，sizeof(string_b) 大小分别是（）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *string_a = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="type">char</span> string_b[<span class="number">100</span>];</span><br></pre></td></tr></table></figure><p>答案：8 100</p><ol start="2"><li>有定义语句int *ptr [4];，下面等价的定义语句是</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A <span class="type">int</span> ** ptr;</span><br><span class="line">B <span class="type">int</span> （ * ptr) [<span class="number">4</span>];</span><br><span class="line">C <span class="type">int</span> ptr[<span class="number">4</span>];</span><br><span class="line">D <span class="type">int</span> * (ptr [<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p>答案：D</p><p>解析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *ptr[<span class="number">4</span>]：ptr是数组，存放了<span class="number">4</span>个指向<span class="type">int</span>类型的指针</span><br><span class="line"><span class="type">int</span> **ptr：ptr是指向<span class="type">int</span>类型指针的指针（是指针）</span><br><span class="line"><span class="type">int</span> (*ptr)[<span class="number">4</span>]：ptr是指针，指向一个二维数组a[N][<span class="number">4</span>]，列数是<span class="number">4</span>，行不知道。也称为行指针，*p指向第一行，*(p+<span class="number">1</span>)指向第二行。</span><br><span class="line"><span class="type">int</span> ptr[<span class="number">4</span>]：ptr是数组，存放了<span class="number">4</span>个<span class="type">int</span>类型变量</span><br><span class="line"><span class="type">int</span> *(ptr[<span class="number">4</span>])：ptr是数组，存放了<span class="number">4</span>个指向<span class="type">int</span>类型的指针，可以将<span class="type">int</span> *看做是一种类型。</span><br></pre></td></tr></table></figure><ol start="3"><li>下面 C 语言定义结构体变量的语句中错误的是（）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span> <span class="type">int</span> num; <span class="type">char</span> name[<span class="number">20</span>]; &#125; s;</span><br><span class="line">B <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="type">int</span> num; <span class="type">char</span> name[<span class="number">20</span>]; &#125; s;</span><br><span class="line">C <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span> <span class="type">int</span> num; <span class="type">char</span> name[<span class="number">20</span>]; &#125;; <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s</span>;</span></span><br><span class="line">D <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span> <span class="type">int</span> num; <span class="type">char</span> name[<span class="number">20</span>]; &#125;; student s;</span><br></pre></td></tr></table></figure><p>答案：D</p><p>注：B：直接定义结构体变量；&#x2F;&#x2F;不推荐，此方法不能继续添加此结构体类型的其他变量了</p><ol start="4"><li><p>在 C&#x2F;C++ 中，若有定义 char a [10], *p&#x3D;a; ，那么下列赋值语句正确的是( )。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A a [] =<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">B a=<span class="string">&quot;abedefg&quot;</span>;</span><br><span class="line">C *p=<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">D p=<span class="string">&quot;abcdefg &quot;</span>;</span><br></pre></td></tr></table></figure><p>答案：D</p><p>注：双引号做了3件事： 1.申请了空间(在常量区)，存放了字符串 2. 在字符串尾加上了’&#x2F;0’ 3.返回地址 你这里就是 返回的地址 赋值给了 p。</p></li><li><p>在32位系统上，下面函数的执行结果是输出（）</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A <span class="number">4</span>，<span class="number">4</span>，<span class="number">4</span></span><br><span class="line">B <span class="number">7</span>，<span class="number">4</span>，<span class="number">4</span></span><br><span class="line">C <span class="number">6</span>，<span class="number">4</span>，<span class="number">4</span></span><br><span class="line">D <span class="number">7</span>，<span class="number">6</span>，<span class="number">4</span></span><br></pre></td></tr></table></figure><p>答案：B</p><ol start="6"><li><p>以下程序段执行后结果是()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">short</span> *p,*q;</span><br><span class="line">    <span class="type">short</span> arr[<span class="number">15</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    p = q = arr;</span><br><span class="line">    p++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, p - q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>, (<span class="type">char</span>*)p - (<span class="type">char</span>*)q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A <span class="number">1</span>,<span class="number">0</span>,<span class="number">15</span></span><br><span class="line">B <span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span></span><br><span class="line">C <span class="number">1</span>,<span class="number">1</span>,<span class="number">15</span></span><br><span class="line">D <span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span></span><br></pre></td></tr></table></figure><p>答案：D</p><p>注：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">指针自增、自减每次移动的偏移量是指针所指向对象的字节大小，所以p++与q的偏移量是<span class="number">2</span>个字节。 </span><br><span class="line">指针相减的值是指针地址的偏移除以指针每次移位的大小； </span><br><span class="line"><span class="number">1</span>)p-q=<span class="number">1</span>;偏移量为<span class="number">2</span>个字节，每次移动<span class="number">2</span>个字节，所以为<span class="number">1</span> </span><br><span class="line"><span class="number">2</span>)(<span class="type">char</span> *)p-(<span class="type">char</span>  *)q，指针的偏移没变，但是每次指针移位是按照（<span class="type">char</span>*）类型移动，即每次移动<span class="number">1</span>个字节，所以是<span class="number">2</span> </span><br><span class="line"><span class="number">3</span>）数字每次元素<span class="number">2</span>个字节，所以<span class="keyword">sizeof</span>(arr)为<span class="number">30</span>，<span class="keyword">sizeof</span>(*arr)为<span class="number">2</span>。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/2023/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/02/26/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开发环境安装"><a href="#一、开发环境安装" class="headerlink" title="一、开发环境安装"></a>一、开发环境安装</h2><p>安装链接：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a><br>[注]：如果出现修改系统环境变量PATH失败，手动添加即可；</p><h2 id="二、小程序特点"><a href="#二、小程序特点" class="headerlink" title="二、小程序特点"></a>二、小程序特点</h2><ol><li>没有DOM</li><li>组件化开发，具有特定功能效果的代码集合</li><li>体积小，单个压缩包不大于2M</li><li>小程序的四个重要的文件<ul><li>.js</li><li>.wxml —view结构 —html</li><li>.wxss —view样式 —css</li><li>.json —view数据 —json文件</li></ul></li><li>小程序的适配方案：rpx（响应式像素单位）<ul><li>适配单位：rpx</li><li>规定任何屏幕下宽度为750rpx</li><li>小程序会根据屏幕的宽度不同自动计算rpx值的大小</li></ul></li></ol><h2 id="三、小程序开发"><a href="#三、小程序开发" class="headerlink" title="三、小程序开发"></a>三、小程序开发</h2><ol><li><p>初始化项目文件 — project.config.json</p></li><li><p>sitemap.json — 见官方文档</p></li><li><p>app.js —App() 注册整个应用、app.json—pages中按顺序启动，在上面的先启动、app.wxss—公共样式文件</p></li><li><p>新建page可自动生成js,json,wxml,wxss文件</p></li><li><p>view 等同于 div  page页面自动在最外层写有 &lt;page&gt;标签</p></li><li><p>数据绑定</p><ul><li><p>Page的js文件中data为页面的初始数据</p></li><li><p>在生命周期函数中修改data中的数据，语法为this.setData({a: ‘xxx’})，修改数据的行为是同步的</p></li><li><p>vue数据劫持代理，利用object.defineProperty(  ,  ,{get(){return xxx}set(xxx){}})</p></li></ul></li><li><p>事件绑定</p><ul><li><p>bind绑定     不会阻止冒泡事件向上冒泡</p></li><li><p>catch绑定  可以阻止冒泡事件向上冒泡</p></li><li><p>扩展内容：事件流的三个阶段：(1)捕获：从外向内    (2)执行目标阶段    (3)冒泡：从内向上</p></li></ul></li><li><p>路由跳转(路径注意加上根路径)</p><ul><li>wx.navigateTo()   点击后有返回按钮，保留之前页面</li><li>wx.redirectTo()  关闭当前页面跳转，可回到主页</li><li>wx.reLaunch()    关闭所有页面跳转，可回到主页</li></ul></li><li><p>生命周期函数</p><ul><li>onLoad()—监听页面加载，只执行一次</li><li>onShow()—监听页面显示，可执行多次</li><li>onReady()—监听页面初次渲染完成，只执行一次</li><li>onHide()</li><li>onUnload()</li></ul></li><li><p>获取用户基本信息</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言复习总结</title>
      <link href="/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础零散的知识点"><a href="#一、基础零散的知识点" class="headerlink" title="一、基础零散的知识点"></a>一、基础零散的知识点</h2><ol><li>%11.9f  —  表示共11位，小数点后9位。</li><li>#define  标识符  常量 —宏定义，后不加；带参数的宏定义#define max(a,b) (a+b)，预处理在编译之前  </li><li>\0 代表字符串结束</li><li>数据类型 <ul><li>基本类型<ul><li>整数类型</li><li>浮点类型</li><li>字符类型</li><li>枚举类型</li></ul></li><li>指针类型</li><li>构造类型<ul><li>数组类型</li><li>结构类型</li><li>联合类型</li></ul></li><li>空类型</li></ul></li><li>sizeof(对象 or 类型)sizeof 变量</li><li>signed（带符号）unsigned（不带符号）—0正1负，int默认带符号型</li><li>补码<ul><li>正数：与原码相同</li><li>负数：符号不变，其余位取反后再+1</li></ul></li><li>强制类型转换 — eg: (int)2.0</li><li>条件运算符（三目）：exp1 ? exp2 : exp3; eg: a&gt;b ? a : b</li><li>字符处理函数：<ul><li>strlen() — 获取长度（不包含\0，sizeof包含，如字符串abc，strlen长度为3，sizeof为4。）</li><li>strcpy()和strncpy() — 拷贝（拷贝后需手动追加\0。）</li><li>strcat()和strncat() — 连接（连接后自动追加\0。）</li><li>strcmp()和strncmp() — 比较（若str1&#x3D;str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数。）</li></ul></li><li>二维数组  int array  [ ]  [4]  ,后面的4必须确定。</li></ol><h2 id="二、指针、内存分配、结构体、单链表"><a href="#二、指针、内存分配、结构体、单链表" class="headerlink" title="二、指针、内存分配、结构体、单链表"></a>二、指针、内存分配、结构体、单链表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="type">char</span> *pa =&amp;a;  其中&amp;为取地址运算符，打印时%p为地址类型数据，还应避免访问未初始化的指针；</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="type">int</span> *p[<span class="number">5</span>] ---指针数组（指针的数组） ， <span class="type">int</span> (*p)[<span class="number">5</span>] --- 数组指针（指向数组的指针）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="literal">NULL</span>不是NUL，<span class="literal">NULL</span>代表空指针，而NUL代表<span class="string">&#x27;\0&#x27;</span>。</span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span> <span class="type">int</span> **p=<span class="built_in">array</span>；其中<span class="built_in">array</span>为二维数组，使用p+<span class="number">1</span>会出错，因为不知道数组跨度为多少与二维数组第二个[]必须道理相通。</span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span> 指向常量的指针 <span class="type">const</span> <span class="type">int</span> *p; --- 可以指向常量or变量，不可以通过指针修改指向的值。</span><br><span class="line">   常量指针 <span class="type">int</span> * <span class="type">const</span> p=&amp;num; --- p不可被修改，及改变p存储的地址</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> 可变参数 <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span> n,...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 指针函数 <span class="type">char</span> *<span class="title function_">getWord</span><span class="params">(<span class="type">char</span> c)</span> ---返回指针的函数<span class="comment">//不能返回局部变量的指针，返回时已经销毁</span></span><br><span class="line">   函数指针 <span class="title function_">char</span> <span class="params">(*get)</span><span class="params">(<span class="type">char</span>)</span> ---指向函数的指针<span class="comment">//get=&amp;getWor;get(&#x27;a&#x27;)或者(*get)(&#x27;a&#x27;)，后者较好，前者会误以为是函数调用。</span></span><br><span class="line">   <span class="comment">// 函数指针作为返回值 int (*select(char op))(int,int);而不是int (*fp(char op)) select(int ,int)。</span></span><br><span class="line"></span><br><span class="line">8. <span class="title function_">extern</span><span class="params">(外部的)</span><span class="comment">//多个文件的声明的同名标识符表示同一个实体。</span></span><br><span class="line">   <span class="title function_">internal</span><span class="params">(内部的)</span><span class="comment">//单个文件声明的同名标识符表示同一个实体。</span></span><br><span class="line">   <span class="comment">//只有具备文件作用域的标识符（如函数名，全局变量）才能拥有extern或者internal的链接属性，static可将external改为internal(全局变量)。</span></span><br><span class="line">   <span class="title function_">none</span><span class="params">(无)</span><span class="comment">//声明的同名标识符被当作独立不同的实体。</span></span><br><span class="line"></span><br><span class="line">9. 存储类型分为：<span class="keyword">auto</span>（默认）,<span class="keyword">register</span><span class="comment">/*寄存器变量无法通过取址运算符获得该变量的地址*/</span>,<span class="type">static</span>,<span class="keyword">extern</span>,<span class="keyword">typedef</span>.</span><br><span class="line"></span><br><span class="line">10. 递归 --- 汉诺塔，x,y,z三根柱子，x全移动到z上可分解为，x最大的移动到z上，x剩下的移动到y上（此时的y即刚刚的x，即将y的全部移动到z上，步数是2的n次方-1）。</span><br><span class="line"></span><br><span class="line">11. 动态内存管理 </span><br><span class="line"><span class="title function_">malloc</span><span class="params">()</span><span class="comment">//int *p=(int *)malloc(sizeof(int));</span></span><br><span class="line"><span class="title function_">calloc</span><span class="params">()</span><span class="comment">//自动初始化 int *p=(int *)calloc(8,sizeof(int));</span></span><br><span class="line"><span class="title function_">realloc</span><span class="params">()</span><span class="comment">//重新分配,int *p=NULL; p=(int *)realloc(p,N*sizeof(int));</span></span><br><span class="line"><span class="built_in">free</span><span class="comment">//free(p); </span></span><br><span class="line"><span class="title function_">memset</span><span class="params">(p,<span class="number">0</span>,N*<span class="keyword">sizeof</span>(<span class="type">int</span>))</span>;<span class="comment">//置零，包含在string.h头文件中</span></span><br><span class="line"><span class="comment">//内存泄漏：（1）隐式内存泄漏（用完未及时使用free）；（2）丢失内存块地址</span></span><br></pre></td></tr></table></figure><ol start="12"><li><img src="/.com//hexo\source\img\1.png" style="zoom:50%;"></li><li>内联函数 — inline，预处理运算符#，##(记号连接运算符)</li><li>结构体</li></ol><ul><li><p>结构体声明 struct  结构体名称{…….}；</p></li><li><p>结构体变量 struct 结构体名称 结构体变量名； </p></li><li><p>访问结构体成员—-点号(.)</p></li><li><p>内存对齐（找到对其目标）</p></li><li><p>结构体可嵌套定义</p></li><li><p>结构体数组—–struct  结构体名称{…..}  结构体变量[长度]</p></li><li><p>结构体指针—–(*结构体指针).成员名   由于.的更优先级，所以需要括号，或 —结构体指针-&gt;成员名</p></li></ul><ol start="15"><li>单链表</li></ol><ul><li>包括信息域和指针域</li></ul><p>16.内存池 — 程序额外维护的缓存区域<br>17.typedef </p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
