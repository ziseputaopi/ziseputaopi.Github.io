<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>热门100题（题目均来自LeetCode）</title>
      <link href="/2023/02/11/%E7%83%AD%E9%97%A8100%E9%A2%98/"/>
      <url>/2023/02/11/%E7%83%AD%E9%97%A8100%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="2023-x2F-02-x2F-11"><a href="#2023-x2F-02-x2F-11" class="headerlink" title="2023&#x2F;02&#x2F;11"></a>2023&#x2F;02&#x2F;11</h3><ol><li><a href="https://leetcode.cn/problems/two-sum/?favorite=2cktkvj">两数之和</a><blockquote><p>​给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。(题目leetCode)</p></blockquote></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    *returnSize=<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span>* <span class="built_in">array</span>=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numsSize<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;numsSize;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j]==target)</span><br><span class="line">                  k=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">0</span>]=i;</span><br><span class="line">    <span class="built_in">array</span>[<span class="number">1</span>]=j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：本题采用暴力求解，可采用hash算法快速找到目标位置达到优化。</p><hr><ol start="2"><li><a href="https://leetcode.cn/problems/add-two-numbers/?favorite=2cktkvj">两数相加</a><blockquote><p>​给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></blockquote></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span>&#123;</span><br><span class="line">    <span class="type">int</span> s=<span class="number">0</span>,is=<span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p1</span>=</span>l1;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">p2</span>=</span>l2;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">end</span>,*<span class="title">node</span>,*<span class="title">sum</span>;</span></span><br><span class="line">    sum=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    end=sum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>&amp;&amp;p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)</span><br><span class="line">     s=is;</span><br><span class="line">    s=s+p1-&gt;val+p2-&gt;val;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    p1=p1-&gt;next;</span><br><span class="line">    p2=p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">   node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)</span><br><span class="line">     s=is;</span><br><span class="line">    s=s+p1-&gt;val+<span class="number">0</span>;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    p1=p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">while</span>(p2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)</span><br><span class="line">     s=is;</span><br><span class="line">    s=s+<span class="number">0</span>+p2-&gt;val;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    p2=p2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">      node=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">    s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(is&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    s=is;</span><br><span class="line">    is=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">      is=s/<span class="number">10</span>;</span><br><span class="line">      s=s%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;val=s;</span><br><span class="line">    end-&gt;next=node;</span><br><span class="line">    end=node;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    end-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> sum-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：代码规范和结构可优化，在此不做调整，整体就是使用链表进行大数加法，如果直接使用整型进行加法会出现超出范围的情况。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode热题100 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言复习总结</title>
      <link href="/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/11/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础零散的知识点"><a href="#一、基础零散的知识点" class="headerlink" title="一、基础零散的知识点"></a>一、基础零散的知识点</h2><ol><li>%11.9f  —  表示共11位，小数点后9位。</li><li>#define  标识符  常量 —宏定义</li><li>\0 代表字符串结束</li><li>数据类型 <ul><li>基本类型<ul><li>整数类型</li><li>浮点类型</li><li>字符类型</li><li>枚举类型</li></ul></li><li>指针类型</li><li>构造类型<ul><li>数组类型</li><li>结构类型</li><li>联合类型</li></ul></li><li>空类型</li></ul></li><li>sizeof(对象 or 类型)sizeof 变量</li><li>signed（带符号）unsigned（不带符号）—0正1负，int默认带符号型</li><li>补码<ul><li>正数：与原码相同</li><li>负数：符号不变，其余位取反后再+1</li></ul></li><li>强制类型转换 — eg: (int)2.0</li><li>条件运算符（三目）：exp1 ? exp2 : exp3; eg: a&gt;b ? a : b</li><li>字符处理函数：<ul><li>strlen() — 获取长度（不包含\0，sizeof包含，如字符串abc，strlen长度为3，sizeof为4。）</li><li>strcpy()和strncpy() — 拷贝（拷贝后需手动追加\0。）</li><li>strcat()和strncat() — 连接（连接后自动追加\0。）</li><li>strcmp()和strncmp() — 比较（若str1&#x3D;str2，则返回零；若str1&lt;str2，则返回负数；若str1&gt;str2，则返回正数。）</li></ul></li><li>二维数组  int array  [ ]  [4]  ,后面的4必须确定。</li></ol><h2 id="二、指针部分"><a href="#二、指针部分" class="headerlink" title="二、指针部分"></a>二、指针部分</h2> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="type">char</span> *pa =&amp;a;  其中&amp;为取地址运算符，打印时%p为地址类型数据，还应避免访问未初始化的指针；</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="type">int</span> *p[<span class="number">5</span>] ---指针数组（指针的数组） ， <span class="type">int</span> (*p)[<span class="number">5</span>] --- 数组指针（指向数组的指针）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="literal">NULL</span>不是NUL，<span class="literal">NULL</span>代表空指针，而NUL代表<span class="string">&#x27;\0&#x27;</span>。</span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span> <span class="type">int</span> **p=<span class="built_in">array</span>；其中<span class="built_in">array</span>为二维数组，使用p+<span class="number">1</span>会出错，因为不知道数组跨度为多少与二维数组第二个[]必须道理相通。</span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span> 指向常量的指针 <span class="type">const</span> <span class="type">int</span> *p; --- 可以指向常量or变量，不可以通过指针修改指向的值。</span><br><span class="line">   常量指针 <span class="type">int</span> * <span class="type">const</span> p=&amp;num; --- p不可被修改，及改变p存储的地址</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span> 可变参数 <span class="type">int</span> <span class="title function_">sum</span> <span class="params">(<span class="type">int</span> n,...)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
